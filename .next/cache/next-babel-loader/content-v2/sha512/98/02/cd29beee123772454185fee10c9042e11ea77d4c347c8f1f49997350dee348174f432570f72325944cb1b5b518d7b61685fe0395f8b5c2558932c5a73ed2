{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\circo\\\\OneDrive\\\\Documentos\\\\repos\\\\examen ml\\\\TestML\\\\components\\\\Autocomplete.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete/Autocomplete';\nimport styled from 'styled-components';\n\nfunction sleep(delay = 0) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport default function AutocompleteWrapper({\n  optionSelected\n}) {\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: options,\n    1: setOptions\n  } = useState([]);\n  const loading = open && options.length === 0;\n  useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    return () => {\n      active = false;\n    };\n  }, [loading]);\n\n  const handleChange = async e => {\n    if (e.target.value && e.target.value !== \"\") {\n      const {\n        data\n      } = await axios(`/api/autosuggest?q=${e.target.value}`);\n      await sleep(1e3);\n      const autosuggest = await data.suggestions;\n      setOptions(autosuggest.map(key => {\n        return {\n          name: key.q\n        };\n      }));\n      console.log(options);\n    }\n  };\n\n  const goToProduct = e => {\n    optionSelected(e);\n  };\n\n  useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n  return __jsx(SearchComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, __jsx(\"img\", {\n    src: \"https://http2.mlstatic.com/frontend-assets/ui-navigation/5.14.3/mercadolibre/logo__large_plus.png\",\n    height: \"34\",\n    width: \"134\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), __jsx(Autocomplete, {\n    id: \"autocomplete\",\n    open: open,\n    onOpen: () => {\n      setOpen(true);\n    },\n    onClose: () => {\n      setOpen(false);\n    },\n    getOptionSelected: (option, value) => {\n      goToProduct(option.name);\n      return option.name === value.name;\n    },\n    getOptionLabel: option => option.name,\n    onInputChange: handleChange,\n    options: options,\n    loading: loading,\n    popupIcon: null,\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      type: \"text\",\n      InputProps: _objectSpread({}, params.InputProps),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }));\n}\nconst SearchComponent = styled.div`\n    background-color: #fff159;\n    display: flex;\n    justify-content: center; \n    align-items: center;\n    padding: 25px;\n`;\nconst AutocompleteComponent = styled(Autocomplete)`\n    box-shadow: 0 1px 2px 0 rgb(0 0 0 / 20%);\n    height: 39px;\n`;","map":{"version":3,"sources":["C:/Users/circo/OneDrive/Documentos/repos/examen ml/TestML/components/Autocomplete.js"],"names":["React","useState","useEffect","axios","TextField","Autocomplete","styled","sleep","delay","Promise","resolve","setTimeout","AutocompleteWrapper","optionSelected","open","setOpen","options","setOptions","loading","length","active","undefined","handleChange","e","target","value","data","autosuggest","suggestions","map","key","name","q","console","log","goToProduct","option","params","InputProps","SearchComponent","div","AutocompleteComponent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete/Autocomplete';\r\nimport styled from 'styled-components'\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\nexport default function AutocompleteWrapper({ optionSelected }) {\r\n    const [open, setOpen] = useState(false);\r\n    const [options, setOptions] = useState([]);\r\n    const loading = open && options.length === 0;\r\n\r\n    useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [loading]);\r\n\r\n    const handleChange = async (e) => {\r\n        if (e.target.value && e.target.value !== \"\") {\r\n            const { data } = await axios(`/api/autosuggest?q=${e.target.value}`)\r\n            await sleep(1e3)\r\n            const autosuggest = await data.suggestions;\r\n            setOptions(autosuggest.map((key) => { return { name: key.q } }));\r\n            console.log(options)\r\n        }\r\n    }\r\n\r\n    const goToProduct = (e) => {\r\n        optionSelected(e)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <SearchComponent>\r\n            <img src='https://http2.mlstatic.com/frontend-assets/ui-navigation/5.14.3/mercadolibre/logo__large_plus.png' height='34' width='134' />\r\n            <Autocomplete\r\n                id=\"autocomplete\"\r\n                open={open}\r\n                onOpen={() => {\r\n                    setOpen(true);\r\n                }}\r\n                onClose={() => {\r\n                    setOpen(false);\r\n                }}\r\n                getOptionSelected={(option, value) => {\r\n                    goToProduct(option.name)\r\n                    return option.name === value.name\r\n                }}\r\n                getOptionLabel={(option) => option.name}\r\n                onInputChange={handleChange}\r\n                options={options}\r\n                loading={loading}\r\n                popupIcon={null}\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        type=\"text\"\r\n                        InputProps={{\r\n                            ...params.InputProps,\r\n                        }}\r\n                    />\r\n                )}\r\n            />\r\n        </SearchComponent>\r\n    );\r\n}\r\n\r\n\r\nconst SearchComponent = styled.div`\r\n    background-color: #fff159;\r\n    display: flex;\r\n    justify-content: center; \r\n    align-items: center;\r\n    padding: 25px;\r\n`\r\nconst AutocompleteComponent = styled(Autocomplete)`\r\n    box-shadow: 0 1px 2px 0 rgb(0 0 0 / 20%);\r\n    height: 39px;\r\n`"]},"metadata":{},"sourceType":"module"}