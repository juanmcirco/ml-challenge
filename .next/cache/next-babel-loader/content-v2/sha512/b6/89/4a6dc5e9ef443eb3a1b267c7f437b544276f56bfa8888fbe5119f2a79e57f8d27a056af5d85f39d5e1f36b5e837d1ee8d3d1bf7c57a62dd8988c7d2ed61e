{"ast":null,"code":"import _taggedTemplateLiteral from \"C:/Users/circo/OneDrive/Documentos/repos/examen ml/TestML/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _extends from \"C:/Users/circo/OneDrive/Documentos/repos/examen ml/TestML/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"C:/Users/circo/OneDrive/Documentos/repos/examen ml/TestML/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"C:/Users/circo/OneDrive/Documentos/repos/examen ml/TestML/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/circo/OneDrive/Documentos/repos/examen ml/TestML/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\circo\\\\OneDrive\\\\Documentos\\\\repos\\\\examen ml\\\\TestML\\\\components\\\\Autocomplete.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    background-color: #fff159;\\n    display: flex;\\n    justify-content: center; \\n    align-items: center;\\n    padding: 10px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete/Autocomplete';\nimport styled, { css } from 'styled-components';\n\nfunction sleep() {\n  var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return new Promise(function (resolve) {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport default function AutocompleteWrapper(_ref) {\n  _s();\n\n  var _this = this;\n\n  var optionSelected = _ref.optionSelected;\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useState2 = useState([]),\n      options = _useState2[0],\n      setOptions = _useState2[1];\n\n  var loading = open && options.length === 0;\n  useEffect(function () {\n    var active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    return function () {\n      active = false;\n    };\n  }, [loading]);\n\n  var handleChange = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _yield$axios, data, autosuggest;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(e.target.value && e.target.value !== \"\")) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 3;\n              return axios(\"/api/autosuggest?q=\".concat(e.target.value));\n\n            case 3:\n              _yield$axios = _context.sent;\n              data = _yield$axios.data;\n              _context.next = 7;\n              return sleep(1e3);\n\n            case 7:\n              _context.next = 9;\n              return data.suggestions;\n\n            case 9:\n              autosuggest = _context.sent;\n              setOptions(autosuggest.map(function (key) {\n                return {\n                  name: key.q\n                };\n              }));\n              console.log(options);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleChange(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var goToProduct = function goToProduct(e) {\n    optionSelected(e);\n  };\n\n  useEffect(function () {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n  return __jsx(SearchComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, __jsx(\"img\", {\n    src: \"https://http2.mlstatic.com/frontend-assets/ui-navigation/5.14.3/mercadolibre/logo__large_plus.png\",\n    height: \"34\",\n    width: \"134\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), __jsx(Autocomplete, {\n    id: \"autocomplete\",\n    open: open,\n    classes: AutocompleteComponent,\n    onOpen: function onOpen() {\n      setOpen(true);\n    },\n    onClose: function onClose() {\n      setOpen(false);\n    },\n    getOptionSelected: function getOptionSelected(option, value) {\n      goToProduct(option.name);\n      return option.name === value.name;\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return option.name;\n    },\n    onInputChange: handleChange,\n    options: options,\n    loading: loading,\n    popupIcon: null,\n    renderInput: function renderInput(params) {\n      return __jsx(AutocompleteComponent, _extends({}, params, {\n        type: \"text\",\n        InputProps: _objectSpread({}, params.InputProps),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }));\n}\n\n_s(AutocompleteWrapper, \"NAnsH/wQUpBOztFs1nPXEavBw+I=\");\n\n_c = AutocompleteWrapper;\nvar SearchComponent = styled.div(_templateObject());\n_c2 = SearchComponent;\nvar AutocompleteComponent = css(\"\\nbox-shadow: 0 1px 2px 0 rgb(0 0 0 / 20%);\\nheight: 39px;\\n\");\n_c3 = AutocompleteComponent;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AutocompleteWrapper\");\n$RefreshReg$(_c2, \"SearchComponent\");\n$RefreshReg$(_c3, \"AutocompleteComponent\");","map":{"version":3,"sources":["C:/Users/circo/OneDrive/Documentos/repos/examen ml/TestML/components/Autocomplete.js"],"names":["React","useState","useEffect","axios","TextField","Autocomplete","styled","css","sleep","delay","Promise","resolve","setTimeout","AutocompleteWrapper","optionSelected","open","setOpen","options","setOptions","loading","length","active","undefined","handleChange","e","target","value","data","suggestions","autosuggest","map","key","name","q","console","log","goToProduct","AutocompleteComponent","option","params","InputProps","SearchComponent","div"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete/Autocomplete';\r\nimport styled, { css } from 'styled-components'\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\nexport default function AutocompleteWrapper({ optionSelected }) {\r\n    const [open, setOpen] = useState(false);\r\n    const [options, setOptions] = useState([]);\r\n    const loading = open && options.length === 0;\r\n\r\n    useEffect(() => {\r\n        let active = true;\r\n\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [loading]);\r\n\r\n    const handleChange = async (e) => {\r\n        if (e.target.value && e.target.value !== \"\") {\r\n            const { data } = await axios(`/api/autosuggest?q=${e.target.value}`)\r\n            await sleep(1e3)\r\n            const autosuggest = await data.suggestions;\r\n            setOptions(autosuggest.map((key) => { return { name: key.q } }));\r\n            console.log(options)\r\n        }\r\n    }\r\n\r\n    const goToProduct = (e) => {\r\n        optionSelected(e)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <SearchComponent>\r\n            <img src='https://http2.mlstatic.com/frontend-assets/ui-navigation/5.14.3/mercadolibre/logo__large_plus.png' height='34' width='134' />\r\n            <Autocomplete\r\n                id=\"autocomplete\"\r\n                open={open}\r\n                classes={AutocompleteComponent}\r\n                onOpen={() => {\r\n                    setOpen(true);\r\n                }}\r\n                onClose={() => {\r\n                    setOpen(false);\r\n                }}\r\n                getOptionSelected={(option, value) => {\r\n                    goToProduct(option.name)\r\n                    return option.name === value.name\r\n                }}\r\n                getOptionLabel={(option) => option.name}\r\n                onInputChange={handleChange}\r\n                options={options}\r\n                loading={loading}\r\n                popupIcon={null}\r\n                renderInput={(params) => (\r\n                    <AutocompleteComponent\r\n                        {...params}\r\n                        type=\"text\"\r\n                        InputProps={{\r\n                            ...params.InputProps,\r\n                        }}\r\n                    />\r\n                )}\r\n            />\r\n        </SearchComponent>\r\n    );\r\n}\r\n\r\n\r\nconst SearchComponent = styled.div`\r\n    background-color: #fff159;\r\n    display: flex;\r\n    justify-content: center; \r\n    align-items: center;\r\n    padding: 10px;\r\n`\r\nconst AutocompleteComponent = css(`\r\nbox-shadow: 0 1px 2px 0 rgb(0 0 0 / 20%);\r\nheight: 39px;\r\n`)\r\n"]},"metadata":{},"sourceType":"module"}