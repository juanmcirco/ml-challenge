{"ast":null,"code":"import _extends from \"C:/Users/circo/OneDrive/Documentos/repos/examen ml/TestML/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"C:/Users/circo/OneDrive/Documentos/repos/examen ml/TestML/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"C:/Users/circo/OneDrive/Documentos/repos/examen ml/TestML/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/circo/OneDrive/Documentos/repos/examen ml/TestML/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\circo\\\\OneDrive\\\\Documentos\\\\repos\\\\examen ml\\\\TestML\\\\components\\\\Autocomplete\\\\Autocomplete.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete/Autocomplete';\n\nfunction sleep() {\n  var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return new Promise(function (resolve) {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport default function AutocompleteWrapper(_ref) {\n  _s();\n\n  var _this = this;\n\n  var optionSelected = _ref.optionSelected;\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useState2 = useState([]),\n      options = _useState2[0],\n      setOptions = _useState2[1];\n\n  var loading = open && options.length === 0;\n  useEffect(function () {\n    var active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    return function () {\n      active = false;\n    };\n  }, [loading]);\n\n  var handleChange = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _yield$axios, data, autosuggest;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(e.target.value && e.target.value !== \"\")) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 3;\n              return axios(\"/api/autosuggest?q=\".concat(e.target.value));\n\n            case 3:\n              _yield$axios = _context.sent;\n              data = _yield$axios.data;\n              _context.next = 7;\n              return sleep(1e3);\n\n            case 7:\n              _context.next = 9;\n              return data.suggestions;\n\n            case 9:\n              autosuggest = _context.sent;\n              setOptions(autosuggest.map(function (key) {\n                return {\n                  name: key.q\n                };\n              }));\n              console.log(options);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleChange(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var goToProduct = function goToProduct(e) {\n    optionSelected(e);\n  };\n\n  useEffect(function () {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n  return __jsx(Autocomplete, {\n    id: \"asynchronous-demo\",\n    style: {\n      width: 300\n    },\n    open: open,\n    onOpen: function onOpen() {\n      setOpen(true);\n    },\n    onClose: function onClose() {\n      setOpen(false);\n    },\n    getOptionSelected: function getOptionSelected(option, value) {\n      goToProduct(option.name);\n      return option.name === value.name;\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return option.name;\n    },\n    onInputChange: handleChange,\n    options: options,\n    loading: loading,\n    popupIcon: null,\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        type: \"text\",\n        InputProps: _objectSpread({}, params.InputProps),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  });\n}\n\n_s(AutocompleteWrapper, \"NAnsH/wQUpBOztFs1nPXEavBw+I=\");\n\n_c = AutocompleteWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutocompleteWrapper\");","map":{"version":3,"sources":["C:/Users/circo/OneDrive/Documentos/repos/examen ml/TestML/components/Autocomplete/Autocomplete.js"],"names":["React","useState","useEffect","axios","TextField","Autocomplete","sleep","delay","Promise","resolve","setTimeout","AutocompleteWrapper","optionSelected","open","setOpen","options","setOptions","loading","length","active","undefined","handleChange","e","target","value","data","suggestions","autosuggest","map","key","name","q","console","log","goToProduct","width","option","params","InputProps"],"mappings":"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","sourcesContent":["import React, {useState , useEffect}from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete/Autocomplete';\r\n\r\nfunction sleep(delay = 0) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n}\r\n\r\nexport default function AutocompleteWrapper({optionSelected}) {\r\n  const [open, setOpen] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const loading = open && options.length === 0;\r\n\r\n  useEffect(() => {\r\n    let active = true;\r\n\r\n    if (!loading) {\r\n      return undefined;\r\n    }\r\n\r\n\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [loading]);\r\n\r\n  const handleChange = async (e) => {\r\n    if(e.target.value && e.target.value !== \"\"){\r\n        const {data} = await axios(`/api/autosuggest?q=${e.target.value}`)\r\n        await sleep(1e3)\r\n        const autosuggest = await data.suggestions;\r\n        setOptions(autosuggest.map((key) => {return {name: key.q}}));\r\n        console.log(options)\r\n    }\r\n  }\r\n\r\n  const goToProduct = (e) =>{\r\n      optionSelected(e)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!open) {\r\n      setOptions([]);\r\n    }\r\n  }, [open]);\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"asynchronous-demo\"\r\n      style={{ width: 300 }}\r\n      open={open}\r\n      onOpen={() => {\r\n        setOpen(true);\r\n      }}\r\n      onClose={() => {\r\n        setOpen(false);\r\n      }}\r\n      getOptionSelected={(option, value) => {\r\n        goToProduct(option.name)\r\n          return option.name === value.name\r\n        }}\r\n      getOptionLabel={(option) => option.name}\r\n      onInputChange={handleChange}\r\n      options={options}\r\n      loading={loading}\r\n      popupIcon={null}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          type=\"text\"\r\n          \r\n          InputProps={{\r\n            ...params.InputProps,\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}