{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\circo\\\\OneDrive\\\\Documentos\\\\repos\\\\examen ml\\\\TestML\\\\components\\\\Autocomplete\\\\Autocomplete.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nfunction sleep(delay = 0) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport default function AutocompleteWrapper() {\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: options,\n    1: setOptions\n  } = useState([]);\n  const loading = open && options.length === 0;\n  useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    return () => {\n      active = false;\n    };\n  }, [loading]);\n\n  const handleChange = async e => {\n    const {\n      data\n    } = await axios(`/api/autosuggest?q=${e.target.value}`);\n    await sleep(1e3);\n    const autosuggest = await data.suggestions;\n    debugger;\n\n    if (active) {\n      setOptions(autosuggest.map(key => {\n        return {\n          name: key.q\n        };\n      }));\n      console.log(options);\n    }\n  };\n\n  useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n  return __jsx(Autocomplete, {\n    id: \"asynchronous-demo\",\n    style: {\n      width: 300\n    },\n    open: open,\n    onOpen: () => {\n      setOpen(true);\n    },\n    onClose: () => {\n      setOpen(false);\n    },\n    getOptionSelected: (option, value) => option.name === value.name,\n    getOptionLabel: option => option.name,\n    onInputChange: handleChange,\n    options: options,\n    loading: loading,\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Asynchronous\",\n      variant: \"outlined\",\n      InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n        endAdornment: __jsx(React.Fragment, null, loading ? __jsx(CircularProgress, {\n          color: \"inherit\",\n          size: 20,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 28\n          }\n        }) : null, params.InputProps.endAdornment)\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/circo/OneDrive/Documentos/repos/examen ml/TestML/components/Autocomplete/Autocomplete.js"],"names":["React","useState","useEffect","axios","TextField","Autocomplete","CircularProgress","sleep","delay","Promise","resolve","setTimeout","AutocompleteWrapper","open","setOpen","options","setOptions","loading","length","active","undefined","handleChange","e","data","target","value","autosuggest","suggestions","map","key","name","q","console","log","width","option","params","InputProps","endAdornment"],"mappings":"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","sourcesContent":["import React, {useState , useEffect}from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nfunction sleep(delay = 0) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n}\r\n\r\nexport default function AutocompleteWrapper() {\r\n  const [open, setOpen] = useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const loading = open && options.length === 0;\r\n\r\n  useEffect(() => {\r\n    let active = true;\r\n\r\n    if (!loading) {\r\n      return undefined;\r\n    }\r\n\r\n\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [loading]);\r\n\r\n  const handleChange = async (e) => {\r\n\r\n    const {data} = await axios(`/api/autosuggest?q=${e.target.value}`)\r\n    await sleep(1e3)\r\n    const autosuggest = await data.suggestions;\r\n\r\n    debugger\r\n\r\n    if (active) {\r\n        setOptions(autosuggest.map((key) => {return {name: key.q}}));\r\n        console.log(options)\r\n    }\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (!open) {\r\n      setOptions([]);\r\n    }\r\n  }, [open]);\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"asynchronous-demo\"\r\n      style={{ width: 300 }}\r\n      open={open}\r\n      onOpen={() => {\r\n        setOpen(true);\r\n      }}\r\n      onClose={() => {\r\n        setOpen(false);\r\n      }}\r\n      getOptionSelected={(option, value) => option.name === value.name}\r\n      getOptionLabel={(option) => option.name}\r\n      onInputChange={handleChange}\r\n      options={options}\r\n      loading={loading}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Asynchronous\"\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            endAdornment: (\r\n              <>\r\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                {params.InputProps.endAdornment}\r\n              </>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}