{"ast":null,"code":"import axios from 'axios';\nexport default async function itemsHandler(req, res) {\n  const {\n    query: {\n      id\n    },\n    method\n  } = req;\n\n  try {\n    var _data$available_filte, _data$available_filte2;\n\n    const {\n      data\n    } = await axios.get(`https://api.mercadolibre.com/items/${id}`);\n    const findCategories = (_data$available_filte = data.available_filters) === null || _data$available_filte === void 0 ? void 0 : (_data$available_filte2 = _data$available_filte.filter(cat => cat.id === 'category')[0]) === null || _data$available_filte2 === void 0 ? void 0 : _data$available_filte2.values;\n    const categories = findCategories ? findCategories.map(val => val.name) : [];\n    const items = data.results.map(item => {\n      return {\n        id: item.id,\n        title: item.title,\n        price: {\n          currency: item.currency_id,\n          amount: item.price,\n          decimals: item.price - Math.floor(item.price) //no entendi bien de donde sacar los decimales, asi que lo calculo respecto al amount\n\n        },\n        picture: item.thumbnail,\n        condition: item.condition,\n        free_shipping: item.shipping.free_shipping\n      };\n    });\n\n    switch (method) {\n      case 'GET':\n        res.status(200).json({\n          author: {\n            name: 'Manu',\n            lastname: 'Barreto'\n          },\n          categories: categories,\n          items: items\n        });\n        break;\n\n      default:\n        res.setHeader('Allow', ['GET']);\n        res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}","map":{"version":3,"sources":["C:/Users/circo/OneDrive/Documentos/repos/examen ml/TestML/pages/api/items/[...id].js"],"names":["axios","itemsHandler","req","res","query","id","method","data","get","findCategories","available_filters","filter","cat","values","categories","map","val","name","items","results","item","title","price","currency","currency_id","amount","decimals","Math","floor","picture","thumbnail","condition","free_shipping","shipping","status","json","author","lastname","setHeader","end","error","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,eAAeC,YAAf,CAA4BC,GAA5B,EAAiCC,GAAjC,EAAsC;AACjD,QAAM;AACFC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADL;AAEFC,IAAAA;AAFE,MAGFJ,GAHJ;;AAKA,MAAI;AAAA;;AACA,UAAM;AAAEK,MAAAA;AAAF,QAAW,MAAMP,KAAK,CAACQ,GAAN,CAAW,sCAAqCH,EAAG,EAAnD,CAAvB;AACA,UAAMI,cAAc,4BAAGF,IAAI,CAACG,iBAAR,oFAAG,sBAAwBC,MAAxB,CAA+BC,GAAG,IAAIA,GAAG,CAACP,EAAJ,KAAW,UAAjD,EAA6D,CAA7D,CAAH,2DAAG,uBAAiEQ,MAAxF;AACA,UAAMC,UAAU,GAAGL,cAAc,GAAGA,cAAc,CAACM,GAAf,CAAmBC,GAAG,IAAIA,GAAG,CAACC,IAA9B,CAAH,GAAyC,EAA1E;AACA,UAAMC,KAAK,GAAGX,IAAI,CAACY,OAAL,CAAaJ,GAAb,CAAiBK,IAAI,IAAI;AACnC,aAAO;AACHf,QAAAA,EAAE,EAAEe,IAAI,CAACf,EADN;AAEHgB,QAAAA,KAAK,EAAED,IAAI,CAACC,KAFT;AAGHC,QAAAA,KAAK,EAAE;AACHC,UAAAA,QAAQ,EAAEH,IAAI,CAACI,WADZ;AAEHC,UAAAA,MAAM,EAAEL,IAAI,CAACE,KAFV;AAGHI,UAAAA,QAAQ,EAAEN,IAAI,CAACE,KAAL,GAAaK,IAAI,CAACC,KAAL,CAAWR,IAAI,CAACE,KAAhB,CAHpB,CAG2C;;AAH3C,SAHJ;AAQHO,QAAAA,OAAO,EAAET,IAAI,CAACU,SARX;AASHC,QAAAA,SAAS,EAAEX,IAAI,CAACW,SATb;AAUHC,QAAAA,aAAa,EAAEZ,IAAI,CAACa,QAAL,CAAcD;AAV1B,OAAP;AAYH,KAba,CAAd;;AAeA,YAAQ1B,MAAR;AACI,WAAK,KAAL;AACIH,QAAAA,GAAG,CAAC+B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,UAAAA,MAAM,EAAE;AACJnB,YAAAA,IAAI,EAAE,MADF;AAEJoB,YAAAA,QAAQ,EAAE;AAFN,WADS;AAKjBvB,UAAAA,UAAU,EAAEA,UALK;AAMjBI,UAAAA,KAAK,EAAEA;AANU,SAArB;AAQA;;AAEJ;AACIf,QAAAA,GAAG,CAACmC,SAAJ,CAAc,OAAd,EAAuB,CAAC,KAAD,CAAvB;AACAnC,QAAAA,GAAG,CAAC+B,MAAJ,CAAW,GAAX,EAAgBK,GAAhB,CAAqB,UAASjC,MAAO,cAArC;AAdR;AAgBH,GAnCD,CAmCE,OAAOkC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AAEJ","sourcesContent":["import axios from 'axios'\r\n\r\nexport default async function itemsHandler(req, res) {\r\n    const {\r\n        query: { id },\r\n        method,\r\n    } = req\r\n\r\n    try {\r\n        const { data } = await axios.get(`https://api.mercadolibre.com/items/${id}`);\r\n        const findCategories = data.available_filters?.filter(cat => cat.id === 'category')[0]?.values\r\n        const categories = findCategories ? findCategories.map(val => val.name) : []\r\n        const items = data.results.map(item => {\r\n            return {\r\n                id: item.id,\r\n                title: item.title,\r\n                price: {\r\n                    currency: item.currency_id,\r\n                    amount: item.price,\r\n                    decimals: item.price - Math.floor(item.price) //no entendi bien de donde sacar los decimales, asi que lo calculo respecto al amount\r\n                },\r\n                picture: item.thumbnail,\r\n                condition: item.condition,\r\n                free_shipping: item.shipping.free_shipping\r\n            }\r\n        })\r\n\r\n        switch (method) {\r\n            case 'GET':\r\n                res.status(200).json({\r\n                    author: {\r\n                        name: 'Manu',\r\n                        lastname: 'Barreto'\r\n                    },\r\n                    categories: categories,\r\n                    items: items\r\n                })\r\n                break\r\n\r\n            default:\r\n                res.setHeader('Allow', ['GET'])\r\n                res.status(405).end(`Method ${method} Not Allowed`)\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}