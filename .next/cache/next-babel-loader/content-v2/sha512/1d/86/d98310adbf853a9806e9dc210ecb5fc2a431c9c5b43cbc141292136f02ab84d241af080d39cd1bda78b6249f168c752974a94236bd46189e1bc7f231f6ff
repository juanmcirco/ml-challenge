{"ast":null,"code":"import axios from 'axios';\nexport default async function itemsHandler(req, res) {\n  const {\n    query: {\n      q\n    },\n    method\n  } = req;\n\n  try {\n    var _data$available_filte, _data$available_filte2;\n\n    const {\n      data\n    } = await axios.get(`https://api.mercadolibre.com/sites/MLA/search?q=${q}`);\n    const findCategories = (_data$available_filte = data.available_filters) === null || _data$available_filte === void 0 ? void 0 : (_data$available_filte2 = _data$available_filte.filter(cat => cat.id === 'category')[0]) === null || _data$available_filte2 === void 0 ? void 0 : _data$available_filte2.values;\n    const categories = findCategories ? findCategories.map(val => val.name) : [];\n    const items = data.results.map(item => {\n      return {\n        id: item.id,\n        title: item.title,\n        price: {\n          currency: item.currency_id,\n          amount: item.price,\n          decimals: item.price - Math.floor(item.price) //no entendi bien de donde sacar los decimales, asi que lo calculo respecto al amount\n\n        },\n        picture: item.thumbnail,\n        condition: item.condition,\n        free_shipping: item.shipping.free_shipping,\n        locations: locations\n      };\n    });\n\n    switch (method) {\n      case 'GET':\n        res.status(200).json({\n          author: {\n            name: 'Juan Manuel',\n            lastname: 'Barreto Zacarias'\n          },\n          categories: categories,\n          items: items\n        });\n        break;\n\n      default:\n        res.setHeader('Allow', ['GET']);\n        res.status(405).end(`Method ${method} Not Allowed`);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}","map":{"version":3,"sources":["C:/Users/circo/OneDrive/Documentos/repos/examen ml/TestML/pages/api/items.js"],"names":["axios","itemsHandler","req","res","query","q","method","data","get","findCategories","available_filters","filter","cat","id","values","categories","map","val","name","items","results","item","title","price","currency","currency_id","amount","decimals","Math","floor","picture","thumbnail","condition","free_shipping","shipping","locations","status","json","author","lastname","setHeader","end","error","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,eAAeC,YAAf,CAA4BC,GAA5B,EAAiCC,GAAjC,EAAsC;AACnD,QAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADH;AAEJC,IAAAA;AAFI,MAGFJ,GAHJ;;AAIA,MAAI;AAAA;;AACF,UAAM;AAAEK,MAAAA;AAAF,QAAW,MAAMP,KAAK,CAACQ,GAAN,CAAW,mDAAkDH,CAAE,EAA/D,CAAvB;AACA,UAAMI,cAAc,4BAAGF,IAAI,CAACG,iBAAR,oFAAG,sBAAwBC,MAAxB,CAA+BC,GAAG,IAAIA,GAAG,CAACC,EAAJ,KAAW,UAAjD,EAA6D,CAA7D,CAAH,2DAAG,uBAAiEC,MAAxF;AACA,UAAMC,UAAU,GAAGN,cAAc,GAAGA,cAAc,CAACO,GAAf,CAAmBC,GAAG,IAAIA,GAAG,CAACC,IAA9B,CAAH,GAAyC,EAA1E;AAEA,UAAMC,KAAK,GAAGZ,IAAI,CAACa,OAAL,CAAaJ,GAAb,CAAiBK,IAAI,IAAI;AACrC,aAAO;AACLR,QAAAA,EAAE,EAAEQ,IAAI,CAACR,EADJ;AAELS,QAAAA,KAAK,EAAED,IAAI,CAACC,KAFP;AAGLC,QAAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAEH,IAAI,CAACI,WADV;AAELC,UAAAA,MAAM,EAAEL,IAAI,CAACE,KAFR;AAGLI,UAAAA,QAAQ,EAAEN,IAAI,CAACE,KAAL,GAAaK,IAAI,CAACC,KAAL,CAAWR,IAAI,CAACE,KAAhB,CAHlB,CAGyC;;AAHzC,SAHF;AAQLO,QAAAA,OAAO,EAAET,IAAI,CAACU,SART;AASLC,QAAAA,SAAS,EAAEX,IAAI,CAACW,SATX;AAULC,QAAAA,aAAa,EAAEZ,IAAI,CAACa,QAAL,CAAcD,aAVxB;AAWLE,QAAAA,SAAS,EAAEA;AAXN,OAAP;AAaD,KAda,CAAd;;AAgBA,YAAQ7B,MAAR;AACE,WAAK,KAAL;AACEH,QAAAA,GAAG,CAACiC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,UAAAA,MAAM,EAAE;AACNpB,YAAAA,IAAI,EAAE,aADA;AAENqB,YAAAA,QAAQ,EAAE;AAFJ,WADW;AAKnBxB,UAAAA,UAAU,EAAEA,UALO;AAMnBI,UAAAA,KAAK,EAAEA;AANY,SAArB;AAQA;;AAEF;AACEhB,QAAAA,GAAG,CAACqC,SAAJ,CAAc,OAAd,EAAuB,CAAC,KAAD,CAAvB;AACArC,QAAAA,GAAG,CAACiC,MAAJ,CAAW,GAAX,EAAgBK,GAAhB,CAAqB,UAASnC,MAAO,cAArC;AAdJ;AAgBD,GArCD,CAqCE,OAAOoC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AAEF","sourcesContent":["import axios from 'axios'\n\nexport default async function itemsHandler(req, res) {\n  const {\n    query: { q },\n    method,\n  } = req\n  try {\n    const { data } = await axios.get(`https://api.mercadolibre.com/sites/MLA/search?q=${q}`);\n    const findCategories = data.available_filters?.filter(cat => cat.id === 'category')[0]?.values\n    const categories = findCategories ? findCategories.map(val => val.name) : []\n\n    const items = data.results.map(item => {\n      return {\n        id: item.id,\n        title: item.title,\n        price: {\n          currency: item.currency_id,\n          amount: item.price,\n          decimals: item.price - Math.floor(item.price) //no entendi bien de donde sacar los decimales, asi que lo calculo respecto al amount\n        },\n        picture: item.thumbnail,\n        condition: item.condition,\n        free_shipping: item.shipping.free_shipping,\n        locations: locations\n      }\n    })\n\n    switch (method) {\n      case 'GET':\n        res.status(200).json({\n          author: {\n            name: 'Juan Manuel',\n            lastname: 'Barreto Zacarias'\n          },\n          categories: categories,\n          items: items\n        })\n        break\n\n      default:\n        res.setHeader('Allow', ['GET'])\n        res.status(405).end(`Method ${method} Not Allowed`)\n    }\n  } catch (error) {\n    console.log(error)\n  }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}